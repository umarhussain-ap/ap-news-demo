package com.systems.demo.apnewsdemo.repository;

import com.systems.demo.apnewsdemo.model.Sport;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.Collection;
import java.util.List;

/**
 * The interface Sport repository.
 */
@Repository
public interface SportRepository extends JpaRepository<Sport,Integer> {



    /**
     * Gets sports having player greater than.
     *
     * @param playerCount the player count
     * @return the sports having player greater than
     *
     * sample query generated by orm :
     * SELECT COUNT(sp.player_id) as player_count,s.name
     * FROM player_sport sp
     * INNER JOIN sport s on s.id = sp.sport_id
     * GROUP BY sport_id,s.name
     * HAVING COUNT(sp.player_id) > 2;
     */
    @Query("select s from Sport s   " +
            "join fetch PlayerSports sp on s.id = sp.sport.id " +
            "GROUP BY sp.sport.id having count(sp.player.id) >= :playerCount")
    List<Sport> getSportsHavingPlayerGreaterThan(@Param("playerCount") Integer playerCount);


    /**
     * Gets sports having no players.
     * sample query generated by orm:
     *
     * SELECT s.name,sp.sport_id
     * FROM sport s
     * left JOIN player_sport sp  on s.id = sp.sport_id
     * where sp.sport_id is null;
     *
     * @return the sports having no players
     */
    @Query("select s from Sport s left join PlayerSports sp on s.id = sp.sport.id where sp.sport is null ")
    List<Sport> getSportsHavingNoPlayers();

}
